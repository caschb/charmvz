#+TITLE: LabBook
#+AUTHOR: CharmVZ Authors
#+STARTUP: overview indent
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Meetings
** 2025-05-02 Grab a preliminary output of projections' cli and do paje
:properties:
:header-args: :tangle charmvz_pipeline.sh :shebang #!/bin/bash
:end:
*** Header Mechanism
#+begin_src shell :results output :exports both
#!/bin/bash

declare -A pj_ids

generate_event_def() {
    local event_name="$1"
    local id="$2"
    pj_ids[$event_name]=$id
    echo "%EventDef $event_name $id"
    "define_$event_name"
    generate_event_closure
}

generate_event_closure() {
    echo "%EndEventDef"
}

field_time()         { echo "%       Time date"; }
field_container()    { echo "%       Container string"; }
field_type()         { echo "%       Type string"; }
field_value_string() { echo "%       Value string"; }
field_value_double() { echo "%       Value double"; }
field_name()         { echo "%       Name string"; }
field_color()        { echo "%       Color color"; }
field_start_container() { echo "%       StartContainer string"; }
field_end_container()   { echo "%       EndContainer string"; }
field_start_container_type() { echo "%       StartContainerType string"; }
field_end_container_type()   { echo "%       EndContainerType string"; }
field_key()          { echo "%       Key string"; }

define_PajePushState() {
    field_time
    field_container
    field_type
    field_value_string
}

define_PajePopState() {
    field_time
    field_container
    field_type
}

define_PajeDefineContainerType() {
    field_name
    field_type
}

define_PajeDefineStateType() {
    field_name
    field_type
}

define_PajeCreateContainer() {
    field_time
    field_type
    field_name
    field_container
}

define_PajeDestroyContainer() {
    field_time
    field_type
    field_name
}

generate_event_def PajeCreateContainer 0
generate_event_def PajeDestroyContainer 1
generate_event_def PajePushState 2
generate_event_def PajePopState 3
generate_event_def PajeDefineContainerType 4
generate_event_def PajeDefineStateType 5
#+end_src
*** The Event Mechanism
#+begin_src shell :results output :exports both
pj() {
    local event_name="$1"
    echo ${pj_ids[$event_name]}
}

# PajePushState Time Container Type Value
pj_PushState() {
    local time="$1" container="$2" type="$3" value="$4"
    echo $(pj "PajePushState") "$time" "$container" "$type" "$value"
}

# PajePopState Time Container Type
pj_PopState() {
    local time="$1" container="$2" type="$3"
    echo $(pj "PajePopState") "$time" "$container" "$type"
}

# PajeDefineContainerType [Alias] Type Name
pj_DefineContainerType() {
    local type="$1" name="$2"
    echo $(pj "PajeDefineContainerType") "$type" "$name"
}

pj_DefineStateType() {
    local type="$1" name="$2"
    echo $(pj "PajeDefineStateType") "$type" "$name"
}

# PajeCreateContainer Time [Alias] Container Type Name
pj_CreateContainer() {
    local time="$1" type="$2" name="$3" container="$4"
    echo $(pj "PajeCreateContainer") "$time" "$type" "$name" "$container"
}

# PajeDestroyContainer Time Type Name
pj_DestroyContainer() {
    local time="$1" type="$2" name="$3"
    echo $(pj "PajeDestroyContainer") "$time" "$type" "$name"
}
#+end_src
*** Our Type Hierarchy Definition
#+begin_src shell :results output :exports both
pj_DefineContainerType PE 0
pj_DefineStateType STATE PE
#+end_src
*** Grab only the part that matters

#+begin_src shell :results output :exports both
TEMPFILE=mytempfile.aux
cat | \
    grep _PROCESSING | \
    cut -d, -f1,5,7,9 > ${TEMPFILE}
#+end_src

#+RESULTS:

*** Create Containers

#+begin_src shell :results output :exports both
PE_ELEMENTS=$(cat ${TEMPFILE} | cut -d, -f4 | sort | uniq)
for pe in ${PE_ELEMENTS}; do
    pj_CreateContainer 0.0 PE pe${pe} 0
done
#+end_src

#+RESULTS:
: 0

*** Events themselves (push and pops)

#+begin_src shell :results output :exports both
cat ${TEMPFILE} | \
    sed 's/,/ /g' | \
    awk '{ print $1 " " $2 " pe" $4 " STATE " $3 }' | \
    sed '/^3/ s/ [^ ]*$//' | \
    sort -S 50% --parallel=4 -T . -s -V --key=2,2
#+end_src

#+RESULTS:

*** Pjdump this thing to a CSV file

#+begin_src shell :results output :exports both
#OUTPUT="output.pj"
#CSV="output.csv"
#~/dev/pajeng/b13/pj_dump ${OUTPUT} | grep ^State > ${CSV}
#head ${CSV}
#+end_src

#+RESULTS:
#+begin_example
State, pe0, STATE, 26236.000000, 26264.000000, 28.000000, 0.000000, 157
State, pe0, STATE, 26268.000000, 26300.000000, 32.000000, 0.000000, 157
State, pe0, STATE, 26303.000000, 26338.000000, 35.000000, 0.000000, 157
State, pe0, STATE, 26340.000000, 26361.000000, 21.000000, 0.000000, 157
State, pe0, STATE, 26425.000000, 26430.000000, 5.000000, 0.000000, 0
State, pe0, STATE, 26479.000000, 26501.000000, 22.000000, 0.000000, 158
State, pe0, STATE, 26501.000000, 26503.000000, 2.000000, 0.000000, 179
State, pe0, STATE, 26503.000000, 26512.000000, 9.000000, 0.000000, 158
State, pe0, STATE, 26512.000000, 26513.000000, 1.000000, 0.000000, 179
State, pe0, STATE, 26513.000000, 26521.000000, 8.000000, 0.000000, 158
#+end_example

** Sample analysis with R
*** Read and plot

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
read_csv("output.csv", progress=FALSE, col_names=FALSE, show_col_types=FALSE) |>
  set_names("State", "Container", "Type", "Start", "End", "Duration", "Depth", "Value") |>
  mutate(Container = as.integer(gsub("pe", "", Container))) -> df
df |>
  ggplot(aes(xmin = Start, xmax = End, fill=as.factor(Value),
             ymin = Container, ymax = Container+1)) +
  geom_rect() +
  theme_bw(base_size=12) +  
  theme(
    panel.grid = element_blank(),
    plot.margin = unit(c(0,0,0,0), "cm"),
    legend.position="top",
    legend.justification = "left",
    legend.spacing = unit(0.5, "mm"),
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0,0,0,0),
    legend.margin=margin(t = 0, unit='cm'),
    legend.title = element_blank())
#+end_src

#+RESULTS:

*** How much time on each of these states

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
df |> select(End) |> slice(n()) |> pull(End) -> s.makespan

df |>
  group_by(Value) |>
  summarize(Duration.sum = sum(Duration)) |>
  mutate(P = Duration.sum / s.makespan * 100) |>
  arrange(-Duration.sum)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 32 × 3
   Value Duration.sum        P
   <dbl>        <dbl>    <dbl>
 1   185     25129563 62.6    
 2   184       695129  1.73   
 3   170       111078  0.277  
 4   181        80995  0.202  
 5     3        57241  0.143  
 6   172        15344  0.0382 
 7   174         6003  0.0149 
 8   171         5761  0.0143 
 9   159         3967  0.00988
10   165         2108  0.00525
# ℹ 22 more rows
# ℹ Use `print(n = ...)` to see more rows
#+end_example

*** How much idle time in a part of the traces that is really computing

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
df |>
  mutate(Next.Start = lead(Start)) |>
  mutate(Gap = Next.Start - End) |>
  filter(Gap != 0) |>
  arrange(-Gap) |>
  select(Gap, everything()) |>
  slice(3:n()) |>
  pull(Gap) |>
  sum() / s.makespan * 100
#+end_src

#+RESULTS:
: [1] 19.45842

*** Wrap-up
**** Trace processing part
- * Check why the dump is failing
- * Understand other important events on that dump
  - the migration phase / the load balancing check phase
- * To be able to identify which core a PE is part of
  - This hierarchy should be coded in Paje as well
- Provide a way to recode chare numbers to names
  - That can be very simply, only by reading with R/Python the STS
    file and doing a left-join
- The idea of generating a parquet file later on
  - We keep generating a CSV file for now
**** Experimental project
- * Run the leanMD application for real
  - You can use more than one machine
- Factors of this experimental project
  - schedulers,
  - the migration frequency,
  - the number of PEs,
  - oversubscription intensity
**** Open an overleaf with the CARLA conference format
- Put a structure of the document
  
